""" .vimrc.appearance
"-------------------------------------------------
" config appearance
"-------------------------------------------------

set showmatch            " 括弧の対応をハイライト
set number               " show line number
"set list                 " 不可視文字表示

" see : http://goo.gl/dToJC
" show line tail space
highlight WhitespaceEOL cterm=underline ctermbg=red guibg=#FF0000
au BufWinEnter * let w:m1 = matchadd("WhitespaceEOL", ' +$')
au WinEnter * let w:m1 = matchadd("WhitespaceEOL", ' +$')

" show line head tab
highlight TabString ctermbg=red guibg=red
au BufWinEnter * let w:m2 = matchadd("TabString", '^\t+')
au WinEnter * let w:m2 = matchadd("TabString", '^\t+')

" show fullwidth space
highlight ZenkakuSpace cterm=underline guibg=#666666
au BufWinEnter * let w:m3 = matchadd("ZenkakuSpace", '　')
au WinEnter * let w:m3 = matchadd("ZenkakuSpace", '　')

set cursorline           " highlight cursor line

" change completion menu background
highlight Pmenu ctermbg=black
highlight PmenuSel ctermbg=grey
highlight PmenuSbar ctermbg=lightcyan

" color scheme
syntax enable
if !has('gui_running')
    set t_Co=256
endif
set background=dark
" colorscheme molokai
colorscheme mrkn256
" 背景を半透明に
"highlight Normal ctermbg=none

" ターミナルタイプによるカラー設定
if &term =~ "xterm-256color" || "screen-256color"
  " 256色
  set t_Co=256
  set t_Sf=[3%dm
  set t_Sb=[4%dm
elseif &term =~ "xterm-debian" || &term =~ "xterm-xfree86"
  set t_Co=16
  set t_Sf=[3%dm
  set t_Sb=[4%dm
elseif &term =~ "xterm-color"
  set t_Co=8
  set t_Sf=[3%dm
  set t_SB=[4%dm
endif

" statusline setting
" insert mode で色変更
"let g:hi_insert = 'highlight StatusLine guifg=darkblue guibg=darkyellow gui=none ctermfg=blue ctermbg=yellow cterm=none'

"if has('syntax')
"  augroup InsertHook
"    autocmd!
"    autocmd InsertEnter * call s:StatusLine('Enter')
"    autocmd InsertLeave * call s:StatusLine('Leave')
"  augroup END
"endif
" if has('unix') && !has('gui_running')
"   " ESCでキー入力待ちになる対策
"   inoremap <silent> <ESC> <ESC>
" endif

"let s:slhlcmd = ''
"function! s:StatusLine(mode)
"  if a:mode == 'Enter'
"    silent! let s:slhlcmd = 'highlight ' . s:GetHighlight('StatusLine')
"    silent exec g:hi_insert
"  else
"    highlight clear StatusLine
"    silent exec s:slhlcmd
"    redraw
"  endif
"endfunction

"function! s:GetHighlight(hi)
"  redir => hl
"  exec 'highlight '.a:hi
"  redir END
"  let hl = substitute(hl, '[\r\n]', '', 'g')
"  let hl = substitute(hl, 'xxx', '', '')
"  return hl
"endfunction


" vim-airline
" set laststatus=2
" let g:airline_powerline_fonts  = 1
" let g:airline_theme            = 'tomorrow'

" lightline.vim {{{

    " see : https://github.com/itchyny/lightline.vim
    set laststatus=2

    let g:lightline = {
                \ 'colorscheme': 'landscape',
                \ 'mode_map': { 'c': 'NORMAL' },
                \ 'active': {
                \   'left': [ [ 'mode', 'paste' ], [ 'fugitive', 'filename' ] ]
                \ },
                \ 'component_function': {
                \   'modified': 'MyModified',
                \   'readonly': 'MyReadonly',
                \   'fugitive': 'MyFugitive',
                \   'filename': 'MyFilename',
                \   'fileformat': 'MyFileformat',
                \   'filetype': 'MyFiletype',
                \   'fileencoding': 'MyFileencoding',
                \   'mode': 'MyMode',
                \ },
                \ 'separator': { 'left': '', 'right': '' },
                \ 'subseparator': { 'left': '|', 'right': '|'}
                \ }
    function! MyModified()
        return &ft =~ 'help\|vimfiler\|gundo' ? '' : &modified ? '+' : &modifiable ? '' : '-'
    endfunction
    function! MyReadonly()
        return &ft !~? 'help\|vimfiler\|gundo' && &ro ? 'x' : ''
    endfunction
    function! MyFilename()
        return ('' != MyReadonly() ? MyReadonly() . ' ' : '') .
                    \ (&ft == 'vimfiler' ? vimfiler#get_status_string() :
                    \  &ft == 'unite' ? unite#get_status_string() :
                    \  &ft == 'vimshell' ? substitute(b:vimshell.current_dir,expand('~'),'~','') :
                    \ '' != expand('%t') ? expand('%t') : '[No Name]') .
                    \ ('' != MyModified() ? ' ' . MyModified() : '')
    endfunction
    function! MyFugitive()
        return &ft !~? 'vimfiler\|gundo' && exists('*fugitive#head') && len(fugitive#head()) ?'b:'.fugitive#head() : ''
    endfunction
    function! MyFileformat()
        return winwidth('.') > 60 ? &fileformat : ''
    endfunction
    function! MyFiletype()
        return winwidth('.') > 60 ? (strlen(&filetype) ? &filetype : 'no ft') : ''
    endfunction
    function! MyFileencoding()
        return winwidth('.') > 60 ? (strlen(&fenc) ? &fenc : &enc) : ''
    endfunction
    function! MyMode()
        return winwidth('.') > 60 ? lightline#mode() : ''
    endfunction

" }}}
